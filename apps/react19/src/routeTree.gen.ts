/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root';
import { Route as PathlessLayoutRouteRouteImport } from './routes/_pathlessLayout/route';
import { Route as PathlessLayoutIndexRouteImport } from './routes/_pathlessLayout/index';

const PathlessLayoutRouteRoute = PathlessLayoutRouteRouteImport.update({
  id: '/_pathlessLayout',
  getParentRoute: () => rootRouteImport,
} as any);
const PathlessLayoutIndexRoute = PathlessLayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PathlessLayoutRouteRoute,
} as any);

export interface FileRoutesByFullPath {
  '/': typeof PathlessLayoutIndexRoute;
}
export interface FileRoutesByTo {
  '/': typeof PathlessLayoutIndexRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  '/_pathlessLayout': typeof PathlessLayoutRouteRouteWithChildren;
  '/_pathlessLayout/': typeof PathlessLayoutIndexRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '/';
  fileRoutesByTo: FileRoutesByTo;
  to: '/';
  id: '__root__' | '/_pathlessLayout' | '/_pathlessLayout/';
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  PathlessLayoutRouteRoute: typeof PathlessLayoutRouteRouteWithChildren;
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_pathlessLayout': {
      id: '/_pathlessLayout';
      path: '';
      fullPath: '';
      preLoaderRoute: typeof PathlessLayoutRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/_pathlessLayout/': {
      id: '/_pathlessLayout/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof PathlessLayoutIndexRouteImport;
      parentRoute: typeof PathlessLayoutRouteRoute;
    };
  }
}

interface PathlessLayoutRouteRouteChildren {
  PathlessLayoutIndexRoute: typeof PathlessLayoutIndexRoute;
}

const PathlessLayoutRouteRouteChildren: PathlessLayoutRouteRouteChildren = {
  PathlessLayoutIndexRoute: PathlessLayoutIndexRoute,
};

const PathlessLayoutRouteRouteWithChildren =
  PathlessLayoutRouteRoute._addFileChildren(PathlessLayoutRouteRouteChildren);

const rootRouteChildren: RootRouteChildren = {
  PathlessLayoutRouteRoute: PathlessLayoutRouteRouteWithChildren,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
